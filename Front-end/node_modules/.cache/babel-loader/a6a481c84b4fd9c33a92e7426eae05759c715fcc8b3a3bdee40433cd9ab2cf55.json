{"ast":null,"code":"var _jsxFileName = \"/Users/davidpessoa/Documents/Faculdade/Lab. Engenharia de Software/ProjectTemis/Front-end/src/Chat.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport LangflowClient from './LangflowClient';\nimport '@chatscope/chat-ui-kit-styles/dist/default/styles.min.css';\nimport { MainContainer, ChatContainer, MessageList, Message, MessageInput, TypingIndicator } from '@chatscope/chat-ui-kit-react';\n\n//const API_KEY = \"coloca a API do Langflow\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Chat() {\n  _s();\n  const [typing, setTyping] = useState(false);\n  const [messages, setMessages] = useState([{\n    message: \"Olá! Testando...\",\n    user: \"SamsAI\",\n    direction: \"ingoing\"\n  }]);\n  const handleSend = async message => {\n    const newMessage = {\n      message: message,\n      user: \"user\",\n      direction: \"outgoing\"\n    };\n    const newMessages = [...messages, newMessage]; //Todas as mensagens antigas + a nova mensagem enviada\n\n    //Atualiza o status da mensagem\n    setMessages(newMessages);\n\n    //Indicador de que a IA está respondendo\n    setTyping(true);\n\n    //Processa a mensagem (envia e exibe a resposta)\n    await processMessageToSamsAI(newMessages);\n  };\n  async function processMessageToSamsAI(chatMessages) {\n    let apiMessage = chatMessages.map();\n  }\n\n  //Precisa fixar o Input\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(MainContainer, {\n      children: /*#__PURE__*/_jsxDEV(ChatContainer, {\n        children: [/*#__PURE__*/_jsxDEV(MessageList, {\n          TypingIndicator: typing ? /*#__PURE__*/_jsxDEV(TypingIndicator, {\n            content: \"SamsAI est\\xE1 digitando...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 49\n          }, this) : null,\n          children: messages.map((message, i) => {\n            return /*#__PURE__*/_jsxDEV(Message, {\n              model: message\n            }, i, false, {\n              fileName: _jsxFileName,\n              lineNumber: 53,\n              columnNumber: 36\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(MessageInput, {\n          placeholder: \"Escreva uma mensagem...\",\n          onSend: handleSend\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, this);\n}\n_s(Chat, \"JxAVsW2fByOzE5pQb4H0tD8M2nY=\");\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useState","LangflowClient","MainContainer","ChatContainer","MessageList","Message","MessageInput","TypingIndicator","jsxDEV","_jsxDEV","Chat","_s","typing","setTyping","messages","setMessages","message","user","direction","handleSend","newMessage","newMessages","processMessageToSamsAI","chatMessages","apiMessage","map","children","content","fileName","_jsxFileName","lineNumber","columnNumber","i","model","placeholder","onSend","_c","$RefreshReg$"],"sources":["/Users/davidpessoa/Documents/Faculdade/Lab. Engenharia de Software/ProjectTemis/Front-end/src/Chat.js"],"sourcesContent":["import React, { useState } from 'react';\nimport LangflowClient from './LangflowClient';\nimport '@chatscope/chat-ui-kit-styles/dist/default/styles.min.css';\nimport { MainContainer, ChatContainer, MessageList, Message, MessageInput, TypingIndicator } from '@chatscope/chat-ui-kit-react';\n\n//const API_KEY = \"coloca a API do Langflow\";\n\nfunction Chat() {\n    const [typing, setTyping] = useState(false);\n\n    const [messages, setMessages] = useState([\n        {\n            message: \"Olá! Testando...\",\n            user: \"SamsAI\",\n            direction: \"ingoing\",\n        }\n    ])\n\n    const handleSend = async (message) => {\n        const newMessage = {\n            message: message,\n            user: \"user\",\n            direction: \"outgoing\",\n        }\n\n        const newMessages = [...messages, newMessage]; //Todas as mensagens antigas + a nova mensagem enviada\n\n        //Atualiza o status da mensagem\n        setMessages(newMessages);\n\n        //Indicador de que a IA está respondendo\n        setTyping(true);\n\n        //Processa a mensagem (envia e exibe a resposta)\n        await processMessageToSamsAI(newMessages);\n    }\n\n    async function processMessageToSamsAI(chatMessages){\n\n\n        let apiMessage = chatMessages.map()\n    }\n\n\n    //Precisa fixar o Input\n    return (\n        <div>\n            <MainContainer>\n                <ChatContainer>\n                    <MessageList\n                    TypingIndicator = {typing ? <TypingIndicator content= \"SamsAI está digitando...\"/> : null}>\n                        {messages.map((message, i) => {\n                            return <Message key = {i} model = {message}/>\n                        })}\n                    </MessageList>\n                    <MessageInput placeholder='Escreva uma mensagem...' onSend={handleSend}/>\n                </ChatContainer>\n            </MainContainer>\n        </div>\n    );\n}\n\nexport default Chat;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,cAAc,MAAM,kBAAkB;AAC7C,OAAO,2DAA2D;AAClE,SAASC,aAAa,EAAEC,aAAa,EAAEC,WAAW,EAAEC,OAAO,EAAEC,YAAY,EAAEC,eAAe,QAAQ,8BAA8B;;AAEhI;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,SAASC,IAAIA,CAAA,EAAG;EAAAC,EAAA;EACZ,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC;EAE3C,MAAM,CAACc,QAAQ,EAAEC,WAAW,CAAC,GAAGf,QAAQ,CAAC,CACrC;IACIgB,OAAO,EAAE,kBAAkB;IAC3BC,IAAI,EAAE,QAAQ;IACdC,SAAS,EAAE;EACf,CAAC,CACJ,CAAC;EAEF,MAAMC,UAAU,GAAG,MAAOH,OAAO,IAAK;IAClC,MAAMI,UAAU,GAAG;MACfJ,OAAO,EAAEA,OAAO;MAChBC,IAAI,EAAE,MAAM;MACZC,SAAS,EAAE;IACf,CAAC;IAED,MAAMG,WAAW,GAAG,CAAC,GAAGP,QAAQ,EAAEM,UAAU,CAAC,CAAC,CAAC;;IAE/C;IACAL,WAAW,CAACM,WAAW,CAAC;;IAExB;IACAR,SAAS,CAAC,IAAI,CAAC;;IAEf;IACA,MAAMS,sBAAsB,CAACD,WAAW,CAAC;EAC7C,CAAC;EAED,eAAeC,sBAAsBA,CAACC,YAAY,EAAC;IAG/C,IAAIC,UAAU,GAAGD,YAAY,CAACE,GAAG,CAAC,CAAC;EACvC;;EAGA;EACA,oBACIhB,OAAA;IAAAiB,QAAA,eACIjB,OAAA,CAACP,aAAa;MAAAwB,QAAA,eACVjB,OAAA,CAACN,aAAa;QAAAuB,QAAA,gBACVjB,OAAA,CAACL,WAAW;UACZG,eAAe,EAAIK,MAAM,gBAAGH,OAAA,CAACF,eAAe;YAACoB,OAAO,EAAE;UAA0B;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAC,CAAC,GAAG,IAAK;UAAAL,QAAA,EACrFZ,QAAQ,CAACW,GAAG,CAAC,CAACT,OAAO,EAAEgB,CAAC,KAAK;YAC1B,oBAAOvB,OAAA,CAACJ,OAAO;cAAW4B,KAAK,EAAIjB;YAAQ,GAApBgB,CAAC;cAAAJ,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAoB,CAAC;UACjD,CAAC;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACO,CAAC,eACdtB,OAAA,CAACH,YAAY;UAAC4B,WAAW,EAAC,yBAAyB;UAACC,MAAM,EAAEhB;QAAW;UAAAS,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAC,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC9D;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACf,CAAC;AAEd;AAACpB,EAAA,CArDQD,IAAI;AAAA0B,EAAA,GAAJ1B,IAAI;AAuDb,eAAeA,IAAI;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}